/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OmInterface extends ethers.utils.Interface {
  functions: {
    "ProposalList(uint256)": FunctionFragment;
    "accessData(uint256,uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "addData(string,string,string,uint256,uint256,uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "addMember(uint256,uint256)": FunctionFragment;
    "canGroupAddData(uint256)": FunctionFragment;
    "canGroupPropose(uint256)": FunctionFragment;
    "castVote(uint256,uint256,bool,uint256,uint256,bytes32,uint256[8])": FunctionFragment;
    "createGroup(uint8,uint256,address,bool,bool)": FunctionFragment;
    "createProposal(string,string,uint256,uint256,uint256,string,uint256,bytes32,uint256,uint256,uint256[8])": FunctionFragment;
    "dataFileCounter()": FunctionFragment;
    "dataList(uint256)": FunctionFragment;
    "getDepth(uint256)": FunctionFragment;
    "getNumberOfLeaves(uint256)": FunctionFragment;
    "getProposalData(uint256)": FunctionFragment;
    "getRoot(uint256)": FunctionFragment;
    "groupAdmins(uint256)": FunctionFragment;
    "groupCounter()": FunctionFragment;
    "groupMembership(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalCounter()": FunctionFragment;
    "removeMember(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "verifiers(uint8)": FunctionFragment;
    "verifyProof(uint256,bytes32,uint256,uint256,uint256,uint256[8])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ProposalList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accessData",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addData",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMember",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canGroupAddData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canGroupPropose",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroup",
    values: [BigNumberish, BigNumberish, string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataFileCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfLeaves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groupAdmins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groupCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "groupMembership",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ProposalList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accessData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canGroupAddData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canGroupPropose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataFileCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDepth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "groupAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "groupCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "groupMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "DataAdded(uint256,uint256,tuple)": EventFragment;
    "GroupCreated(uint256,uint8,uint256)": EventFragment;
    "MemberAdded(uint256,uint256,uint256)": EventFragment;
    "MemberRemoved(uint256,uint256,uint256)": EventFragment;
    "NullifierHashAdded(uint256)": EventFragment;
    "OmGroupCreated(uint256,address)": EventFragment;
    "OmMemberAdded(uint256,uint256)": EventFragment;
    "OmMemberRemoved(uint256,uint256)": EventFragment;
    "ProofVerified(uint256,bytes32)": EventFragment;
    "ProposalCreated(uint256,uint256,tuple)": EventFragment;
    "VoteCast(uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DataAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NullifierHashAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OmGroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OmMemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OmMemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProofVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export type DataAddedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
      title: string;
      dataOwner: string;
      addedDate: BigNumber;
      dataURI: string;
      fileURI: string;
      groupId: BigNumber;
      dataType: BigNumber;
    }
  ] & {
    groupId: BigNumber;
    dataId: BigNumber;
    dataInfos: [
      string,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber
    ] & {
      title: string;
      dataOwner: string;
      addedDate: BigNumber;
      dataURI: string;
      fileURI: string;
      groupId: BigNumber;
      dataType: BigNumber;
    };
  }
>;

export type GroupCreatedEvent = TypedEvent<
  [BigNumber, number, BigNumber] & {
    groupId: BigNumber;
    depth: number;
    zeroValue: BigNumber;
  }
>;

export type MemberAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    groupId: BigNumber;
    identityCommitment: BigNumber;
    root: BigNumber;
  }
>;

export type MemberRemovedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    groupId: BigNumber;
    identityCommitment: BigNumber;
    root: BigNumber;
  }
>;

export type NullifierHashAddedEvent = TypedEvent<
  [BigNumber] & { nullifierHash: BigNumber }
>;

export type OmGroupCreatedEvent = TypedEvent<
  [BigNumber, string] & { groupId: BigNumber; admin: string }
>;

export type OmMemberAddedEvent = TypedEvent<
  [BigNumber, BigNumber] & { groupId: BigNumber; memberID: BigNumber }
>;

export type OmMemberRemovedEvent = TypedEvent<
  [BigNumber, BigNumber] & { groupId: BigNumber; memberID: BigNumber }
>;

export type ProofVerifiedEvent = TypedEvent<
  [BigNumber, string] & { groupId: BigNumber; signal: string }
>;

export type ProposalCreatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      title: string;
      description: string;
      yesCount: BigNumber;
      noCount: BigNumber;
      StartDate: BigNumber;
      EndDate: BigNumber;
      IpfsURI: string;
    }
  ] & {
    groupId: BigNumber;
    proposalCounter: BigNumber;
    proposalData: [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      title: string;
      description: string;
      yesCount: BigNumber;
      noCount: BigNumber;
      StartDate: BigNumber;
      EndDate: BigNumber;
      IpfsURI: string;
    };
  }
>;

export type VoteCastEvent = TypedEvent<
  [BigNumber, BigNumber, boolean] & {
    groupId: BigNumber;
    proposalId: BigNumber;
    vote: boolean;
  }
>;

export class Om extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OmInterface;

  functions: {
    ProposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        title: string;
        description: string;
        yesCount: BigNumber;
        noCount: BigNumber;
        StartDate: BigNumber;
        EndDate: BigNumber;
        IpfsURI: string;
      }
    >;

    accessData(
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addData(
      title: string,
      dataURI: string,
      fileURI: string,
      dataType: BigNumberish,
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canGroupAddData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canGroupPropose(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    castVote(
      groupId: BigNumberish,
      root: BigNumberish,
      vote: boolean,
      nullifierHash: BigNumberish,
      externalNullifierProposalId: BigNumberish,
      signal: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGroup(
      depth: BigNumberish,
      zeroValue: BigNumberish,
      admin: string,
      canPropose: boolean,
      canAddData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProposal(
      title: string,
      description: string,
      root: BigNumberish,
      startDate: BigNumberish,
      endDate: BigNumberish,
      proposalURI: string,
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dataFileCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    dataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
        title: string;
        dataOwner: string;
        addedDate: BigNumber;
        dataURI: string;
        fileURI: string;
        groupId: BigNumber;
        dataType: BigNumber;
      }
    >;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposalData(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          title: string;
          description: string;
          yesCount: BigNumber;
          noCount: BigNumber;
          StartDate: BigNumber;
          EndDate: BigNumber;
          IpfsURI: string;
        }
      ] & {
        ProposalData: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          title: string;
          description: string;
          yesCount: BigNumber;
          noCount: BigNumber;
          StartDate: BigNumber;
          EndDate: BigNumber;
          IpfsURI: string;
        };
      }
    >;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    groupAdmins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    groupCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    groupMembership(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ProposalList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      title: string;
      description: string;
      yesCount: BigNumber;
      noCount: BigNumber;
      StartDate: BigNumber;
      EndDate: BigNumber;
      IpfsURI: string;
    }
  >;

  accessData(
    groupId: BigNumberish,
    root: BigNumberish,
    signal: BytesLike,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addData(
    title: string,
    dataURI: string,
    fileURI: string,
    dataType: BigNumberish,
    groupId: BigNumberish,
    root: BigNumberish,
    signal: BytesLike,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMember(
    groupId: BigNumberish,
    identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canGroupAddData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canGroupPropose(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  castVote(
    groupId: BigNumberish,
    root: BigNumberish,
    vote: boolean,
    nullifierHash: BigNumberish,
    externalNullifierProposalId: BigNumberish,
    signal: BytesLike,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGroup(
    depth: BigNumberish,
    zeroValue: BigNumberish,
    admin: string,
    canPropose: boolean,
    canAddData: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProposal(
    title: string,
    description: string,
    root: BigNumberish,
    startDate: BigNumberish,
    endDate: BigNumberish,
    proposalURI: string,
    groupId: BigNumberish,
    signal: BytesLike,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dataFileCounter(overrides?: CallOverrides): Promise<BigNumber>;

  dataList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
      title: string;
      dataOwner: string;
      addedDate: BigNumber;
      dataURI: string;
      fileURI: string;
      groupId: BigNumber;
      dataType: BigNumber;
    }
  >;

  getDepth(groupId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  getNumberOfLeaves(
    groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalData(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      title: string;
      description: string;
      yesCount: BigNumber;
      noCount: BigNumber;
      StartDate: BigNumber;
      EndDate: BigNumber;
      IpfsURI: string;
    }
  >;

  getRoot(groupId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  groupAdmins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  groupCounter(overrides?: CallOverrides): Promise<BigNumber>;

  groupMembership(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

  removeMember(
    groupId: BigNumberish,
    identityCommitment: BigNumberish,
    proofSiblings: BigNumberish[],
    proofPathIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  verifyProof(
    groupId: BigNumberish,
    signal: BytesLike,
    root: BigNumberish,
    nullifierHash: BigNumberish,
    externalNullifier: BigNumberish,
    proof: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ProposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        title: string;
        description: string;
        yesCount: BigNumber;
        noCount: BigNumber;
        StartDate: BigNumber;
        EndDate: BigNumber;
        IpfsURI: string;
      }
    >;

    accessData(
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<boolean>;

    addData(
      title: string,
      dataURI: string,
      fileURI: string,
      dataType: BigNumberish,
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canGroupAddData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canGroupPropose(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    castVote(
      groupId: BigNumberish,
      root: BigNumberish,
      vote: boolean,
      nullifierHash: BigNumberish,
      externalNullifierProposalId: BigNumberish,
      signal: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    createGroup(
      depth: BigNumberish,
      zeroValue: BigNumberish,
      admin: string,
      canPropose: boolean,
      canAddData: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    createProposal(
      title: string,
      description: string,
      root: BigNumberish,
      startDate: BigNumberish,
      endDate: BigNumberish,
      proposalURI: string,
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    dataFileCounter(overrides?: CallOverrides): Promise<BigNumber>;

    dataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
        title: string;
        dataOwner: string;
        addedDate: BigNumber;
        dataURI: string;
        fileURI: string;
        groupId: BigNumber;
        dataType: BigNumber;
      }
    >;

    getDepth(groupId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalData(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        title: string;
        description: string;
        yesCount: BigNumber;
        noCount: BigNumber;
        StartDate: BigNumber;
        EndDate: BigNumber;
        IpfsURI: string;
      }
    >;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    groupAdmins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    groupCounter(overrides?: CallOverrides): Promise<BigNumber>;

    groupMembership(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DataAdded(uint256,uint256,tuple)"(
      groupId?: BigNumberish | null,
      dataId?: null,
      dataInfos?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
          title: string;
          dataOwner: string;
          addedDate: BigNumber;
          dataURI: string;
          fileURI: string;
          groupId: BigNumber;
          dataType: BigNumber;
        }
      ],
      {
        groupId: BigNumber;
        dataId: BigNumber;
        dataInfos: [
          string,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          title: string;
          dataOwner: string;
          addedDate: BigNumber;
          dataURI: string;
          fileURI: string;
          groupId: BigNumber;
          dataType: BigNumber;
        };
      }
    >;

    DataAdded(
      groupId?: BigNumberish | null,
      dataId?: null,
      dataInfos?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        [string, string, BigNumber, string, string, BigNumber, BigNumber] & {
          title: string;
          dataOwner: string;
          addedDate: BigNumber;
          dataURI: string;
          fileURI: string;
          groupId: BigNumber;
          dataType: BigNumber;
        }
      ],
      {
        groupId: BigNumber;
        dataId: BigNumber;
        dataInfos: [
          string,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          title: string;
          dataOwner: string;
          addedDate: BigNumber;
          dataURI: string;
          fileURI: string;
          groupId: BigNumber;
          dataType: BigNumber;
        };
      }
    >;

    "GroupCreated(uint256,uint8,uint256)"(
      groupId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber],
      { groupId: BigNumber; depth: number; zeroValue: BigNumber }
    >;

    GroupCreated(
      groupId?: BigNumberish | null,
      depth?: null,
      zeroValue?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber],
      { groupId: BigNumber; depth: number; zeroValue: BigNumber }
    >;

    "MemberAdded(uint256,uint256,uint256)"(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { groupId: BigNumber; identityCommitment: BigNumber; root: BigNumber }
    >;

    MemberAdded(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { groupId: BigNumber; identityCommitment: BigNumber; root: BigNumber }
    >;

    "MemberRemoved(uint256,uint256,uint256)"(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { groupId: BigNumber; identityCommitment: BigNumber; root: BigNumber }
    >;

    MemberRemoved(
      groupId?: BigNumberish | null,
      identityCommitment?: null,
      root?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { groupId: BigNumber; identityCommitment: BigNumber; root: BigNumber }
    >;

    "NullifierHashAdded(uint256)"(
      nullifierHash?: null
    ): TypedEventFilter<[BigNumber], { nullifierHash: BigNumber }>;

    NullifierHashAdded(
      nullifierHash?: null
    ): TypedEventFilter<[BigNumber], { nullifierHash: BigNumber }>;

    "OmGroupCreated(uint256,address)"(
      groupId?: null,
      admin?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { groupId: BigNumber; admin: string }
    >;

    OmGroupCreated(
      groupId?: null,
      admin?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { groupId: BigNumber; admin: string }
    >;

    "OmMemberAdded(uint256,uint256)"(
      groupId?: null,
      memberID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { groupId: BigNumber; memberID: BigNumber }
    >;

    OmMemberAdded(
      groupId?: null,
      memberID?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { groupId: BigNumber; memberID: BigNumber }
    >;

    "OmMemberRemoved(uint256,uint256)"(
      groupId?: BigNumberish | null,
      memberID?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { groupId: BigNumber; memberID: BigNumber }
    >;

    OmMemberRemoved(
      groupId?: BigNumberish | null,
      memberID?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { groupId: BigNumber; memberID: BigNumber }
    >;

    "ProofVerified(uint256,bytes32)"(
      groupId?: BigNumberish | null,
      signal?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { groupId: BigNumber; signal: string }
    >;

    ProofVerified(
      groupId?: BigNumberish | null,
      signal?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { groupId: BigNumber; signal: string }
    >;

    "ProposalCreated(uint256,uint256,tuple)"(
      groupId?: BigNumberish | null,
      proposalCounter?: null,
      proposalData?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          title: string;
          description: string;
          yesCount: BigNumber;
          noCount: BigNumber;
          StartDate: BigNumber;
          EndDate: BigNumber;
          IpfsURI: string;
        }
      ],
      {
        groupId: BigNumber;
        proposalCounter: BigNumber;
        proposalData: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          title: string;
          description: string;
          yesCount: BigNumber;
          noCount: BigNumber;
          StartDate: BigNumber;
          EndDate: BigNumber;
          IpfsURI: string;
        };
      }
    >;

    ProposalCreated(
      groupId?: BigNumberish | null,
      proposalCounter?: null,
      proposalData?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
          title: string;
          description: string;
          yesCount: BigNumber;
          noCount: BigNumber;
          StartDate: BigNumber;
          EndDate: BigNumber;
          IpfsURI: string;
        }
      ],
      {
        groupId: BigNumber;
        proposalCounter: BigNumber;
        proposalData: [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string
        ] & {
          title: string;
          description: string;
          yesCount: BigNumber;
          noCount: BigNumber;
          StartDate: BigNumber;
          EndDate: BigNumber;
          IpfsURI: string;
        };
      }
    >;

    "VoteCast(uint256,uint256,bool)"(
      groupId?: BigNumberish | null,
      proposalId?: null,
      vote?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { groupId: BigNumber; proposalId: BigNumber; vote: boolean }
    >;

    VoteCast(
      groupId?: BigNumberish | null,
      proposalId?: null,
      vote?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, boolean],
      { groupId: BigNumber; proposalId: BigNumber; vote: boolean }
    >;
  };

  estimateGas: {
    ProposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accessData(
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addData(
      title: string,
      dataURI: string,
      fileURI: string,
      dataType: BigNumberish,
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canGroupAddData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canGroupPropose(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVote(
      groupId: BigNumberish,
      root: BigNumberish,
      vote: boolean,
      nullifierHash: BigNumberish,
      externalNullifierProposalId: BigNumberish,
      signal: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGroup(
      depth: BigNumberish,
      zeroValue: BigNumberish,
      admin: string,
      canPropose: boolean,
      canAddData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProposal(
      title: string,
      description: string,
      root: BigNumberish,
      startDate: BigNumberish,
      endDate: BigNumberish,
      proposalURI: string,
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dataFileCounter(overrides?: CallOverrides): Promise<BigNumber>;

    dataList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalData(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    groupAdmins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    groupCounter(overrides?: CallOverrides): Promise<BigNumber>;

    groupMembership(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ProposalList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accessData(
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addData(
      title: string,
      dataURI: string,
      fileURI: string,
      dataType: BigNumberish,
      groupId: BigNumberish,
      root: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canGroupAddData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canGroupPropose(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castVote(
      groupId: BigNumberish,
      root: BigNumberish,
      vote: boolean,
      nullifierHash: BigNumberish,
      externalNullifierProposalId: BigNumberish,
      signal: BytesLike,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGroup(
      depth: BigNumberish,
      zeroValue: BigNumberish,
      admin: string,
      canPropose: boolean,
      canAddData: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProposal(
      title: string,
      description: string,
      root: BigNumberish,
      startDate: BigNumberish,
      endDate: BigNumberish,
      proposalURI: string,
      groupId: BigNumberish,
      signal: BytesLike,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dataFileCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepth(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfLeaves(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalData(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoot(
      groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    groupAdmins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    groupCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    groupMembership(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMember(
      groupId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifiers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyProof(
      groupId: BigNumberish,
      signal: BytesLike,
      root: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifier: BigNumberish,
      proof: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
